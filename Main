#include <iostream>
#include <algorithm> //To use Min and Max functions.

void printTriangle(int triangle[], int size, int triangleHeight);
int calculateMaxPath(int numbers[], int size, int height);
int calculateMinPath(int numbers[], int size, int height);

int main(int argc, char* argv[])
{
	int numbers[] = //TODO Read from file instead of hard coding the array
	{
																	59,
																  73, 41,
																52, 40,  9,
															  26, 53, 06, 34,
															10, 51, 87, 86, 81,
														  61, 95, 66, 57, 25, 68,
														90, 81, 80, 38, 92, 67, 73,
													  30, 28, 51, 76, 81, 18, 75, 44,
													84, 14, 95, 87, 62, 81, 17, 78, 58,
												  21, 46, 71, 58, 02, 79, 62, 39, 31,  9,
												56, 34, 35, 53, 78, 31, 81, 18, 90, 93, 15,
											  78, 53, 04, 21, 84, 93, 32, 13, 97, 11, 37, 51,
											45, 03, 81, 79, 05, 18, 78, 86, 13, 30, 63, 99, 95,
										  39, 87, 96, 28, 03, 38, 42, 17, 82, 87, 58, 07, 22, 57,
										06, 17, 51, 17, 07, 93,  9, 07, 75, 97, 95, 78, 87,  8, 53,
									  67, 66, 59, 60, 88, 99, 94, 65, 55, 77, 55, 34, 27, 53, 78, 28,
									76, 40, 41, 04, 87, 16,  9, 42, 75, 69, 23, 97, 30, 60, 10, 79, 87,
								  12, 10, 44, 26, 21, 36, 32, 84, 98, 60, 13, 12, 36, 16, 63, 31, 91, 35,
								70, 39, 06, 05, 55, 27, 38, 48, 28, 22, 34, 35, 62, 62, 15, 14, 94, 89, 86,
							  66, 56, 68, 84, 96, 21, 34, 34, 34, 81, 62, 40, 65, 54, 62, 05, 98, 03, 02, 60,
							38, 89, 46, 37, 99, 54, 34, 53, 36, 14, 70, 26, 02, 90, 45, 13, 31, 61, 83, 73, 47,
						  36, 10, 63, 96, 60, 49, 41, 05, 37, 42, 14, 58, 84, 93, 96, 17,  9, 43, 05, 43, 06, 59,
						66, 57, 87, 57, 61, 28, 37, 51, 84, 73, 79, 15, 39, 95, 88, 87, 43, 39, 11, 86, 77, 74, 18,
					  54, 42, 05, 79, 30, 49, 99, 73, 46, 37, 50, 02, 45,  9, 54, 52, 27, 95, 27, 65, 19, 45, 26, 45,
					71, 39, 17, 78, 76, 29, 52, 90, 18, 99, 78, 19, 35, 62, 71, 19, 23, 65, 93, 85, 49, 33, 75,  9, 02,
				  33, 24, 47, 61, 60, 55, 32, 88, 57, 55, 91, 54, 46, 57, 07, 77, 98, 52, 80, 99, 24, 25, 46, 78, 79, 05,
				92,  9, 13, 55, 10, 67, 26, 78, 76, 82, 63, 49, 51, 31, 24, 68, 05, 57, 07, 54, 69, 21, 67, 43, 17, 63, 12,
			  24, 59, 06,  8, 98, 74, 66, 26, 61, 60, 13, 03,  9,  9, 24, 30, 71,  8, 88, 70, 72, 70, 29, 90, 11, 82, 41, 34,
			66, 82, 67, 04, 36, 60, 92, 77, 91, 85, 62, 49, 59, 61, 30, 90, 29, 94, 26, 41, 89, 04, 53, 22, 83, 41,  9, 74, 90,
		  48, 28, 26, 37, 28, 52, 77, 26, 51, 32, 18, 98, 79, 36, 62, 13, 17,  8, 19, 54, 89, 29, 73, 68, 42, 14,  8, 16, 70, 37,
		37, 60, 69, 70, 72, 71,  9, 59, 13, 60, 38, 13, 57, 36,  9, 30, 43, 89, 30, 39, 15, 02, 44, 73, 05, 73, 26, 63, 56, 86, 12,
	  55, 55, 85, 50, 62, 99, 84, 77, 28, 85, 03, 21, 27, 22, 19, 26, 82, 69, 54, 04, 13, 07, 85, 14, 01, 15, 70, 59, 89, 95, 10, 19
	};

	/*code to read triangle into an array
	std::ifstream file.open("triangle.txt");
	if (!file.good())
		throw std::runtime_error("This file could not be opened");
	*/

	const int sizeOfTriangle = sizeof(numbers) / sizeof(int); // Size of returns the size of a type in bits, dividing numbers[] by sizeof int (which is 4) returns the length of numbers[]
	
	const int height = (int)(sqrt(2.0 * sizeOfTriangle));  
	
	printTriangle(numbers, sizeOfTriangle, height);

	std::cout << std::endl << std::endl;
	std::cout << "Maximum Path Count: " << calculateMaxPath(numbers, sizeOfTriangle, height) << std::endl;
	std::cout << "Minimum Path Count: " << calculateMinPath(numbers, sizeOfTriangle, height) << std::endl;
	
	while (true);
}

int calculateMaxPath(int numbers[], int size, int height) {
	//Don't modify the actual numbers[] array, as other functions need it later. FIXME


	for (int s = height - 1; s > 0; --s)													// S = the size of the row.  No point in doing the last row, because there is only one option.
		for (int k = (s * (s - 1)) / 2; k < (s * (s + 2)) / 2; ++k)								// K is the amount of indexes left.
			numbers[k] += std::max(numbers[k + s], numbers[k + s + 1]);						//work through the array, replacing the [k] index with the maximum number between [k + s] and [k + s + 1] indexes

	return numbers[0];
}

int calculateMinPath(int numbers[], int size, int height) {
	// Arrays are passed by reference, so this function is given the modified numbers[]. FIXME

	for (int s = height - 1; s > 0; --s)      //Starts at the bottom row and moves up from there. 
		for (int k = (s * (s - 1)) / 2; k < (s * (s + 2)) / 2; ++k)
			numbers[k] += std::min(numbers[k + s], numbers[k + s + 1]);			// replace the last index with the lowest possible number
	return numbers[0];
}

void printTriangle(int numbers[], int indexTotal, int triangleHeight) {
	int row = 1;   // The row number is also the amount of indexes in the row

	//The length of the last row divided by 2 is the index of the middle of the triangle. Used to print in the center. the length of the last row is also the same as the height.
	//Concatenate each row into a string to print with center justification? setw from iomanip to half the size of the last row
	int middleIndex = triangleHeight / 2;

	// X is the current row, traverse the triangle from top to bottom and print index 'X', and the rest of the numbers in its row
	for (int x = 0; x < triangleHeight; x++){
		for (int i = 0; i < row; i++)
			std::cout << numbers[x + i] << " ";
		row++;
		std::cout << std::endl;
	}
}


#include <iostream>
#include <algorithm> //To use Min and Max functions.
#include <fstream>
#include <string>

int calculateMaxPath(int numbers[], int size, int height);
int calculateMinPath(int numbers[], int size, int height);
int* readTriangle();

int main(int argc, char* argv[])
{
	const int sizeOfTriangle = 32;
	
	const int height = (int)(sqrt(2.0 * sizeOfTriangle));  

	std::cout << std::endl << std::endl;
	std::cout << "Maximum Path Count: " << calculateMaxPath(readTriangle(), sizeOfTriangle, height) << std::endl;
	std::cout << "Minimum Path Count: " << calculateMinPath(readTriangle(), sizeOfTriangle, height) << std::endl;
	
	while (true);
}

int calculateMaxPath(int numbers[], int size, int height) {
	//Don't modify the actual numbers[] array, as other functions need it later. FIXME


	for (int s = height - 1; s > 0; --s)													// S = the size of the row.  No point in doing the last row, because there is only one option.
		for (int k = (s * (s - 1)) / 2; k < (s * (s + 2)) / 2; ++k)								// K is the amount of indexes left.
			numbers[k] += std::max(numbers[k + s], numbers[k + s + 1]);						//work through the array, replacing the [k] index with the maximum number between [k + s] and [k + s + 1] indexes

	return numbers[0];
}

int calculateMinPath(int numbers[], int size, int height) {
	// Arrays are passed by reference, so this function is given the modified numbers[]. FIXME

	for (int s = height - 1; s > 0; --s)      //Starts at the bottom row and moves up from there. 
		for (int k = (s * (s - 1)) / 2; k < (s * (s + 2)) / 2; ++k)
			numbers[k] += std::min(numbers[k + s], numbers[k + s + 1]);			// replace the last index with the lowest possible number
	return numbers[0];
}


int* readTriangle(){
	std::string row;
	std::string triangleString;
	std::ifstream input("C:\\Users\\nmoel\\Desktop\\TriangleOfNumbers.txt");
	while (input.good())
	{
		std::getline(input, row);
		triangleString += row;
	}
	triangleString.erase(std::remove(triangleString.begin(), triangleString.end(), ' '), triangleString.end());
	const int indexes = triangleString.length() / 2;

	int *numbers = new int[indexes];

	int i = 0;
	for (int x = 1; x < triangleString.length() - 1; x += 2, i++) {
		numbers[i] = std::stoi((std::string() + triangleString[x - 1] + triangleString[x]));
	}
	return numbers;
}
